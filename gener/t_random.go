
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-14 12:51:49.889076638 +0200 CEST
//code for table t_random

package gener



import (
	"restfest/db"
	"fmt"
	"time"
)

var dummyT_random time.Time

type T_randomParams struct {
    Length int `schema:"length"`
    Offset int `schema:"offset"`
}


type T_random struct {
    Id int32  `json:"id"`
    Md5 *string  `json:"md5"`
    Gaga *string  `json:"gaga"`
    Fk *int32  `json:"fk"`
}



func SQLT_random(flag db.SQLOper)string{
  x :=   "id,md5,gaga,fk"

  switch flag{
			
    case db.GenSelectID,  db.GenSelectAll:
    return fmt.Sprintf(db.SQLPattern[flag],
    x,
	     "t_random"	,
      "id" ,
    )

		case db.GenSelectAll1:
		return fmt.Sprintf(db.SQLPattern[flag],
		x,
   "t_random"	,
  		)

		case db.GenInsert:
		return  fmt.Sprintf( db.SQLPattern[flag],
			"t_random"	,
			 "md5,gaga,fk"  ,
			 "$1,$2,$3" ,
				x)

				case db.GenDelete:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"t_random"	,
						"id",
						x)
				case db.GenUpdate:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"t_random"	,
						"md5=$1,gaga=$2,fk=$3"  ,
						"id=$4",
					x)

			
  }

	return ""

}


func EmptyT_random() interface{}{
    return new(T_random)
}


func EmptyParamT_random() interface{}{

 rt := new(T_randomParams)

	
		rt.Length=100
	

    return rt
}

func ScannerT_random()( []interface{}, interface{}){
	struT := new(T_random)

return  []interface{}{
				&struT.Id,
				&struT.Md5,
				&struT.Gaga,
				&struT.Fk,
			}, struT

}


func ScannerTT_random()( []interface{},*T_random){
	struT := new(T_random)

return  []interface{}{
				&struT.Id,
				&struT.Md5,
				&struT.Gaga,
				&struT.Fk,
			}, struT

}


func ROWInsertT_random(inter interface{})[]interface{}{
					
  rt := inter.( *T_random )
	
  return []interface{}{
				
	&rt.Md5,
	&rt.Gaga,
	&rt.Fk,

  }

}


func ROWQueryT_random(inter interface{})[]interface{}{
  rt := inter.( *T_randomParams )

  return []interface{}{
		&rt.Length,
		&rt.Offset,
}

}
