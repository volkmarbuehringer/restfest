
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-10 21:37:34.823243882 +0200 CEST
//code for table tester

package gener


import (
	"restfest/db"
)

type TesterParams struct {
    Length db.JSONNullInt64 `schema:"length"`
    Offset db.JSONNullInt64 `schema:"offset"`
}


type Tester struct {
    Name db.JSONString  `json:"name"`
    Vorname db.JSONString  `json:"vorname"`
    Id int64  `json:"id"`
    Code db.JSONString  `json:"code"`
    Lala db.JSONNullInt64  `json:"lala"`
}



func SQLTester(flag db.SQLOper)[]interface{}{
  x :=   "name,vorname,id,code,lala"

  switch flag{
    case db.GenSelect:
    return []interface{}{
    x,
		       "tester"	,
    	   "id" ,
    }
			
    case db.GenInsert:
    return    []interface{}{   "tester"	,
       "name,vorname,code,lala"  ,
       "$1,$2,$3,$4" ,
        x,
      }
    default:
      return    []interface{}{   "tester"	,
        "name=$1,vorname=$2,code=$3,lala=$4"  ,
        "id=$5",
      x,
        }

  }
			
			
}


func EmptyTester() interface{}{
    return new(Tester)
}


func EmptyParamTester() interface{}{
    return new(TesterParams)
}

func ScannerTester()( []interface{}, interface{}){
	struT := new(Tester)

return  []interface{}{
				&struT.Name,
				&struT.Vorname,
				&struT.Id,
				&struT.Code,
				&struT.Lala,
			}, struT

}


func ScannerTTester()( []interface{},*Tester){
	struT := new(Tester)

return  []interface{}{
				&struT.Name,
				&struT.Vorname,
				&struT.Id,
				&struT.Code,
				&struT.Lala,
			}, struT

}


func ROWInsertTester(inter interface{})[]interface{}{
					
  rt := inter.( *Tester )
	
  return []interface{}{
				
	&rt.Name,
	&rt.Vorname,
	&rt.Code,
	&rt.Lala,

  }

}


func ROWQueryTester(inter interface{})[]interface{}{
  rt := inter.( *TesterParams )

 if !rt.Length.Valid {
	rt.Length.Int64=100
	rt.Length.Valid=true
} 

  return []interface{}{
		&rt.Length,
		&rt.Offset,
}

}
