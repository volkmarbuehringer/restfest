
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-14 12:51:49.931353186 +0200 CEST
//code for table pk_select

package gener



import (
	"restfest/db"
	"fmt"
	"time"
)

var dummyPk_select time.Time

type Pk_selectParams struct {
    Length int `schema:"length"`
    Offset int `schema:"offset"`
}


type Pk_select struct {
    Table_name *string  `json:"table_name"`
    Column_name *string  `json:"column_name"`
}



func SQLPk_select(flag db.SQLOper)string{
  x :=   "table_name,column_name"

  switch flag{
			
    case db.GenSelectID,  db.GenSelectAll:
    return fmt.Sprintf(db.SQLPattern[flag],
    x,
	     "pk_select"	,
      "table_name" ,
    )

		case db.GenSelectAll1:
		return fmt.Sprintf(db.SQLPattern[flag],
		x,
   "pk_select"	,
  		)

		case db.GenInsert:
		return  fmt.Sprintf( db.SQLPattern[flag],
			"pk_select"	,
			 "column_name"  ,
			 "$1" ,
				x)

				case db.GenDelete:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"pk_select"	,
						"table_name",
						x)
				case db.GenUpdate:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"pk_select"	,
						"column_name=$1"  ,
						"table_name=$2",
					x)

			
  }

	return ""

}


func EmptyPk_select() interface{}{
    return new(Pk_select)
}


func EmptyParamPk_select() interface{}{

 rt := new(Pk_selectParams)

	
		rt.Length=100
	

    return rt
}

func ScannerPk_select()( []interface{}, interface{}){
	struT := new(Pk_select)

return  []interface{}{
				&struT.Table_name,
				&struT.Column_name,
			}, struT

}


func ScannerTPk_select()( []interface{},*Pk_select){
	struT := new(Pk_select)

return  []interface{}{
				&struT.Table_name,
				&struT.Column_name,
			}, struT

}


func ROWInsertPk_select(inter interface{})[]interface{}{
					
  rt := inter.( *Pk_select )
	
  return []interface{}{
				
	&rt.Column_name,

  }

}


func ROWQueryPk_select(inter interface{})[]interface{}{
  rt := inter.( *Pk_selectParams )

  return []interface{}{
		&rt.Length,
		&rt.Offset,
}

}
