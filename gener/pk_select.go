
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-10 21:37:34.906287633 +0200 CEST
//code for table pk_select

package gener


import (
	"restfest/db"
)

type Pk_selectParams struct {
    Length db.JSONNullInt64 `schema:"length"`
    Offset db.JSONNullInt64 `schema:"offset"`
}


type Pk_select struct {
    Table_name db.JSONString  `json:"table_name"`
    Column_name db.JSONString  `json:"column_name"`
}



func SQLPk_select(flag db.SQLOper)[]interface{}{
  x :=   "table_name,column_name"

  switch flag{
    case db.GenSelect:
    return []interface{}{
    x,
		       "pk_select"	,
    	   "table_name" ,
    }
			
    case db.GenInsert:
    return    []interface{}{   "pk_select"	,
       "column_name"  ,
       "$1" ,
        x,
      }
    default:
      return    []interface{}{   "pk_select"	,
        "column_name=$1"  ,
        "table_name=$2",
      x,
        }

  }
			
			
}


func EmptyPk_select() interface{}{
    return new(Pk_select)
}


func EmptyParamPk_select() interface{}{
    return new(Pk_selectParams)
}

func ScannerPk_select()( []interface{}, interface{}){
	struT := new(Pk_select)

return  []interface{}{
				&struT.Table_name,
				&struT.Column_name,
			}, struT

}


func ScannerTPk_select()( []interface{},*Pk_select){
	struT := new(Pk_select)

return  []interface{}{
				&struT.Table_name,
				&struT.Column_name,
			}, struT

}


func ROWInsertPk_select(inter interface{})[]interface{}{
					
  rt := inter.( *Pk_select )
	
  return []interface{}{
				
	&rt.Column_name,

  }

}


func ROWQueryPk_select(inter interface{})[]interface{}{
  rt := inter.( *Pk_selectParams )

 if !rt.Length.Valid {
	rt.Length.Int64=100
	rt.Length.Valid=true
} 

  return []interface{}{
		&rt.Length,
		&rt.Offset,
}

}
