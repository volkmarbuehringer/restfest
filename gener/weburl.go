
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-11 20:26:39.941886347 +0200 CEST
//code for table weburl

package gener



import (
	"restfest/db"
	"fmt"
)

type WeburlParams struct {
    Length db.JSONNullInt64 `schema:"length"`
    Offset db.JSONNullInt64 `schema:"offset"`
}


type Weburl struct {
    Id int64  `json:"id"`
    Url db.JSONString  `json:"url"`
    Zusatz db.JSONNullInt64  `json:"zusatz"`
    Created db.NullTime  `json:"created"`
    W_cr_date db.NullTime  `json:"w_cr_date"`
    W_upd_date db.NullTime  `json:"w_upd_date"`
    W_upd_uid db.JSONString  `json:"w_upd_uid"`
    W_cr_uid db.JSONString  `json:"w_cr_uid"`
    Addtime db.NullTime  `json:"addtime"`
    Addtime1 db.NullTime  `json:"addtime1"`
    Flag bool  `json:"flag"`
}



func SQLWeburl(flag db.SQLOper)string{
  x :=   "id,url,zusatz,created,w_cr_date,w_upd_date,w_upd_uid,w_cr_uid,addtime,addtime1,flag"

  switch flag{
			
    case db.GenSelectID:
    return fmt.Sprintf(db.SQLPattern[db.GenSelectID],
    x,
	     "weburl"	,
      "id" ,
    )

		case db.GenSelectAll:
		return fmt.Sprintf(db.SQLPattern[db.GenSelectAll],
		x,
   "weburl"	,
  "id",
		)

		case db.GenInsert:
		return  fmt.Sprintf( db.SQLPattern[db.GenInsert],
			"weburl"	,
			 "url,zusatz,created,w_cr_date,w_cr_uid,addtime,addtime1,flag"  ,
			 "$1,$2,$3,current_timestamp,'webSrv',$4,$5,$6" ,
				x)

				case db.GenDelete:
				return  fmt.Sprintf(db.SQLPattern[db.GenDelete]  ,
					"weburl"	,
						"id",
						x)
				case db.GenUpdate:
				return  fmt.Sprintf(db.SQLPattern[db.GenUpdate]  ,
					"weburl"	,
						"url=$1,zusatz=$2,created=$3,w_upd_date=current_timestamp,w_upd_uid='webSrv',addtime=$4,addtime1=$5,flag=$6"  ,
						"id=$7",
					x)

			
  }

	return ""

}


func EmptyWeburl() interface{}{
    return new(Weburl)
}


func EmptyParamWeburl() interface{}{

 rt := new(WeburlParams)

	 if !rt.Length.Valid {
		rt.Length.Int64=100
		rt.Length.Valid=true
	} 

    return rt
}

func ScannerWeburl()( []interface{}, interface{}){
	struT := new(Weburl)

return  []interface{}{
				&struT.Id,
				&struT.Url,
				&struT.Zusatz,
				&struT.Created,
				&struT.W_cr_date,
				&struT.W_upd_date,
				&struT.W_upd_uid,
				&struT.W_cr_uid,
				&struT.Addtime,
				&struT.Addtime1,
				&struT.Flag,
			}, struT

}


func ScannerTWeburl()( []interface{},*Weburl){
	struT := new(Weburl)

return  []interface{}{
				&struT.Id,
				&struT.Url,
				&struT.Zusatz,
				&struT.Created,
				&struT.W_cr_date,
				&struT.W_upd_date,
				&struT.W_upd_uid,
				&struT.W_cr_uid,
				&struT.Addtime,
				&struT.Addtime1,
				&struT.Flag,
			}, struT

}


func ROWInsertWeburl(inter interface{})[]interface{}{
					
  rt := inter.( *Weburl )
	
  return []interface{}{
				
	&rt.Url,
	&rt.Zusatz,
	&rt.Created,
	&rt.Addtime,
	&rt.Addtime1,
	&rt.Flag,

  }

}


func ROWQueryWeburl(inter interface{})[]interface{}{
  rt := inter.( *WeburlParams )

  return []interface{}{
		&rt.Length,
		&rt.Offset,
}

}
