
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-13 21:48:53.080318397 +0200 CEST
//code for table weburl

package gener



import (
	"restfest/db"
	"fmt"
	"time"
)

var dummyWeburl time.Time

type WeburlParams struct {
    Length int `schema:"length"`
    Offset int `schema:"offset"`
}


type Weburl struct {
    Id int32  `json:"id"`
    Url *string  `json:"url"`
    Zusatz *int64  `json:"zusatz"`
    Created *time.Time  `json:"created"`
    W_cr_date *time.Time  `json:"w_cr_date"`
    W_upd_date *time.Time  `json:"w_upd_date"`
    W_upd_uid *string  `json:"w_upd_uid"`
    W_cr_uid *string  `json:"w_cr_uid"`
    Addtime *time.Time  `json:"addtime"`
    Addtime1 *time.Time  `json:"addtime1"`
    Flag bool  `json:"flag"`
    Test *float64  `json:"test"`
}



func SQLWeburl(flag db.SQLOper)string{
  x :=   "id,url,zusatz,created,w_cr_date,w_upd_date,w_upd_uid,w_cr_uid,addtime,addtime1,flag,test"

  switch flag{
			
    case db.GenSelectID:
    return fmt.Sprintf(db.SQLPattern[db.GenSelectID],
    x,
	     "weburl"	,
      "id" ,
    )

		case db.GenSelectAll:
		return fmt.Sprintf(db.SQLPattern[db.GenSelectAll],
		x,
   "weburl"	,
  "id",
		)


		case db.GenSelectAll1:
		return fmt.Sprintf(db.SQLPattern[db.GenSelectAll1],
		x,
   "weburl"	,
  		)

		case db.GenInsert:
		return  fmt.Sprintf( db.SQLPattern[db.GenInsert],
			"weburl"	,
			 "url,zusatz,created,w_cr_date,w_cr_uid,addtime,addtime1,flag,test"  ,
			 "$1,$2,$3,current_timestamp,'webSrv',$4,$5,$6,$7" ,
				x)

				case db.GenDelete:
				return  fmt.Sprintf(db.SQLPattern[db.GenDelete]  ,
					"weburl"	,
						"id",
						x)
				case db.GenUpdate:
				return  fmt.Sprintf(db.SQLPattern[db.GenUpdate]  ,
					"weburl"	,
						"url=$1,zusatz=$2,created=$3,w_upd_date=current_timestamp,w_upd_uid='webSrv',addtime=$4,addtime1=$5,flag=$6,test=$7"  ,
						"id=$8",
					x)

			
  }

	return ""

}


func EmptyWeburl() interface{}{
    return new(Weburl)
}


func EmptyParamWeburl() interface{}{

 rt := new(WeburlParams)

	
		rt.Length=100
	

    return rt
}

func ScannerWeburl()( []interface{}, interface{}){
	struT := new(Weburl)

return  []interface{}{
				&struT.Id,
				&struT.Url,
				&struT.Zusatz,
				&struT.Created,
				&struT.W_cr_date,
				&struT.W_upd_date,
				&struT.W_upd_uid,
				&struT.W_cr_uid,
				&struT.Addtime,
				&struT.Addtime1,
				&struT.Flag,
				&struT.Test,
			}, struT

}


func ScannerTWeburl()( []interface{},*Weburl){
	struT := new(Weburl)

return  []interface{}{
				&struT.Id,
				&struT.Url,
				&struT.Zusatz,
				&struT.Created,
				&struT.W_cr_date,
				&struT.W_upd_date,
				&struT.W_upd_uid,
				&struT.W_cr_uid,
				&struT.Addtime,
				&struT.Addtime1,
				&struT.Flag,
				&struT.Test,
			}, struT

}


func ROWInsertWeburl(inter interface{})[]interface{}{
					
  rt := inter.( *Weburl )
	
  return []interface{}{
				
	&rt.Url,
	&rt.Zusatz,
	&rt.Created,
	&rt.Addtime,
	&rt.Addtime1,
	&rt.Flag,
	&rt.Test,

  }

}


func ROWQueryWeburl(inter interface{})[]interface{}{
  rt := inter.( *WeburlParams )

  return []interface{}{
		&rt.Length,
		&rt.Offset,
}

}
