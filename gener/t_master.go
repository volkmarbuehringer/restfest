
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-10 21:37:34.844282781 +0200 CEST
//code for table t_master

package gener


import (
	"restfest/db"
)

type T_masterParams struct {
    Length db.JSONNullInt64 `schema:"length"`
    Offset db.JSONNullInt64 `schema:"offset"`
}


type T_master struct {
    Id int64  `json:"id"`
    Lulu db.JSONString  `json:"lulu"`
    Lulu1 db.JSONString  `json:"lulu1"`
}



func SQLT_master(flag db.SQLOper)[]interface{}{
  x :=   "id,lulu,lulu1"

  switch flag{
    case db.GenSelect:
    return []interface{}{
    x,
		       "t_master"	,
    	   "id" ,
    }
			
    case db.GenInsert:
    return    []interface{}{   "t_master"	,
       "lulu,lulu1"  ,
       "$1,$2" ,
        x,
      }
    default:
      return    []interface{}{   "t_master"	,
        "lulu=$1,lulu1=$2"  ,
        "id=$3",
      x,
        }

  }
			
			
}


func EmptyT_master() interface{}{
    return new(T_master)
}


func EmptyParamT_master() interface{}{
    return new(T_masterParams)
}

func ScannerT_master()( []interface{}, interface{}){
	struT := new(T_master)

return  []interface{}{
				&struT.Id,
				&struT.Lulu,
				&struT.Lulu1,
			}, struT

}


func ScannerTT_master()( []interface{},*T_master){
	struT := new(T_master)

return  []interface{}{
				&struT.Id,
				&struT.Lulu,
				&struT.Lulu1,
			}, struT

}


func ROWInsertT_master(inter interface{})[]interface{}{
					
  rt := inter.( *T_master )
	
  return []interface{}{
				
	&rt.Lulu,
	&rt.Lulu1,

  }

}


func ROWQueryT_master(inter interface{})[]interface{}{
  rt := inter.( *T_masterParams )

 if !rt.Length.Valid {
	rt.Length.Int64=100
	rt.Length.Valid=true
} 

  return []interface{}{
		&rt.Length,
		&rt.Offset,
}

}
