
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-11 21:36:51.561306958 +0200 CEST
//code for table vtester

package gener



import (
	"restfest/db"
	"fmt"
	"time"
)

var dummyVtester time.Time

type VtesterParams struct {
    Length *int64 `schema:"length"`
    Offset *int64 `schema:"offset"`
}


type Vtester struct {
    Name db.JSONString  `json:"name"`
    Vorname db.JSONString  `json:"vorname"`
    Id *int64  `json:"id"`
    Code db.JSONString  `json:"code"`
    Lala *int64  `json:"lala"`
}



func SQLVtester(flag db.SQLOper)string{
  x :=   "name,vorname,id,code,lala"

  switch flag{
			
    case db.GenSelectID:
    return fmt.Sprintf(db.SQLPattern[db.GenSelectID],
    x,
	     "vtester"	,
      "name" ,
    )

		case db.GenSelectAll:
		return fmt.Sprintf(db.SQLPattern[db.GenSelectAll],
		x,
   "vtester"	,
  "name",
		)

		case db.GenInsert:
		return  fmt.Sprintf( db.SQLPattern[db.GenInsert],
			"vtester"	,
			 "vorname,id,code,lala"  ,
			 "$1,$2,$3,$4" ,
				x)

				case db.GenDelete:
				return  fmt.Sprintf(db.SQLPattern[db.GenDelete]  ,
					"vtester"	,
						"name",
						x)
				case db.GenUpdate:
				return  fmt.Sprintf(db.SQLPattern[db.GenUpdate]  ,
					"vtester"	,
						"vorname=$1,id=$2,code=$3,lala=$4"  ,
						"name=$5",
					x)

			
  }

	return ""

}


func EmptyVtester() interface{}{
    return new(Vtester)
}


func EmptyParamVtester() interface{}{

 rt := new(VtesterParams)

	
		tt := new(int64)
		*tt = 100
		rt.Length=tt
				tt = new(int64)
 	*tt = 0
 	rt.Offset=tt

	

    return rt
}

func ScannerVtester()( []interface{}, interface{}){
	struT := new(Vtester)

return  []interface{}{
				&struT.Name,
				&struT.Vorname,
				&struT.Id,
				&struT.Code,
				&struT.Lala,
			}, struT

}


func ScannerTVtester()( []interface{},*Vtester){
	struT := new(Vtester)

return  []interface{}{
				&struT.Name,
				&struT.Vorname,
				&struT.Id,
				&struT.Code,
				&struT.Lala,
			}, struT

}


func ROWInsertVtester(inter interface{})[]interface{}{
					
  rt := inter.( *Vtester )
	
  return []interface{}{
				
	&rt.Vorname,
	&rt.Id,
	&rt.Code,
	&rt.Lala,

  }

}


func ROWQueryVtester(inter interface{})[]interface{}{
  rt := inter.( *VtesterParams )

  return []interface{}{
		&rt.Length,
		&rt.Offset,
}

}
