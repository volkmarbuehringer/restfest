
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-11 19:28:42.891760797 +0200 CEST
//code for table vweburl

package gener



import (
	"restfest/db"
	"fmt"
)

type VweburlParams struct {
    Length db.JSONNullInt64 `schema:"length"`
    Offset db.JSONNullInt64 `schema:"offset"`
}


type Vweburl struct {
    Id db.JSONNullInt64  `json:"id"`
    Url db.JSONString  `json:"url"`
    Zusatz db.JSONNullInt64  `json:"zusatz"`
    Created db.NullTime  `json:"created"`
    W_cr_date db.NullTime  `json:"w_cr_date"`
    W_upd_date db.NullTime  `json:"w_upd_date"`
    W_upd_uid db.JSONString  `json:"w_upd_uid"`
    W_cr_uid db.JSONString  `json:"w_cr_uid"`
}



func SQLVweburl(flag db.SQLOper)string{
  x :=   "id,url,zusatz,created,w_cr_date,w_upd_date,w_upd_uid,w_cr_uid"

  switch flag{
			
    case db.GenSelectID:
    return fmt.Sprintf("select %s from " + db.DBschema + ".%s where %s=$1",
    x,
	     "vweburl"	,
      "id" ,
    )

		case db.GenSelectAll:
		return fmt.Sprintf("select %s from " + db.DBschema + ".%s order by %s limit $1 offset $2",
		x,
   "vweburl"	,
  "id",
		)

		case db.GenInsert:
		return  fmt.Sprintf(   `insert into ` + db.DBschema + `.%s(%s)values(%s) returning %s`,
			"vweburl"	,
			 "url,zusatz,created,w_cr_date,w_cr_uid"  ,
			 "$1,$2,$3,current_timestamp,'webSrv'" ,
				x)

				default:
				return  fmt.Sprintf(  `update ` + db.DBschema + `.%s set %s where %s returning %s`,
					"vweburl"	,
						"url=$1,zusatz=$2,created=$3,w_upd_date=current_timestamp,w_upd_uid='webSrv'"  ,
						"id=$4",
					x)

			
  }
			
			
}


func EmptyVweburl() interface{}{
    return new(Vweburl)
}


func EmptyParamVweburl() interface{}{
    return new(VweburlParams)
}

func ScannerVweburl()( []interface{}, interface{}){
	struT := new(Vweburl)

return  []interface{}{
				&struT.Id,
				&struT.Url,
				&struT.Zusatz,
				&struT.Created,
				&struT.W_cr_date,
				&struT.W_upd_date,
				&struT.W_upd_uid,
				&struT.W_cr_uid,
			}, struT

}


func ScannerTVweburl()( []interface{},*Vweburl){
	struT := new(Vweburl)

return  []interface{}{
				&struT.Id,
				&struT.Url,
				&struT.Zusatz,
				&struT.Created,
				&struT.W_cr_date,
				&struT.W_upd_date,
				&struT.W_upd_uid,
				&struT.W_cr_uid,
			}, struT

}


func ROWInsertVweburl(inter interface{})[]interface{}{
					
  rt := inter.( *Vweburl )
	
  return []interface{}{
				
	&rt.Url,
	&rt.Zusatz,
	&rt.Created,

  }

}


func ROWQueryVweburl(inter interface{})[]interface{}{
  rt := inter.( *VweburlParams )

 if !rt.Length.Valid {
	rt.Length.Int64=100
	rt.Length.Valid=true
} 

  return []interface{}{
		&rt.Length,
		&rt.Offset,
}

}
