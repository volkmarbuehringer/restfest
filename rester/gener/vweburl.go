
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-05-04 22:19:20.401837143 +0200 CEST
//code for table vweburl

package genrester



import (
	"restfest/db"
	"fmt"
	"time"
	"io"
	"strings"
		"encoding/json"
	"github.com/jackc/pgx"
			
)

type dummyVweburl time.Time

type VweburlParams struct {
    Length int
    Offset int
}

type Vweburl struct {
    Id *int32  `json:"id"`
    Url *string  `json:"url"`
    Zusatz *int64  `json:"zusatz"`
    Created *time.Time  `json:"created"`
    W_cr_date *time.Time  `json:"w_cr_date"`
    W_upd_date *time.Time  `json:"w_upd_date"`
    W_upd_uid *string  `json:"w_upd_uid"`
    W_cr_uid *string  `json:"w_cr_uid"`
}

type ArVweburl []Vweburl



var  VweburlSQL  =db.ColumnLists{
	 "id,url,zusatz,created,w_cr_date,w_upd_date,w_upd_uid,w_cr_uid",
	  "url,zusatz,created,w_cr_date,w_cr_uid"  ,
		 "$1,$2,$3,current_timestamp,'webSrv'" ,
	   "id" ,
		 "id=$4",
		"url,zusatz,created"	 ,
						"url=$1,zusatz=$2,created=$3,w_upd_date=current_timestamp,w_upd_uid='webSrv'"  ,

}


func (x *VweburlParams) Scanner() db.InterPgx {
	return db.InterPgx{
				&x.Length,
				&x.Offset,
			}

}

func (x Vweburl) Reader(mapper map[string][]string) [][]string {
	return [][]string{
				}

}


func (x VweburlParams) Reader(mapper map[string][]string) [][]string {
	return [][]string{
		mapper["length"],
		mapper["offset"],
			}

}



func (t Vweburl) Columns() []string {
	return strings.Split(VweburlSQL.All,",")
}


func (x *Vweburl) Scanner() db.InterPgx {
	return db.InterPgx{
				&x.Id,
				&x.Url,
				&x.Zusatz,
				&x.Created,
				&x.W_cr_date,
				&x.W_upd_date,
				&x.W_upd_uid,
				&x.W_cr_uid,
			}

}

func (rt *Vweburl)ROWInsert() db.InterPgx {
	  return db.InterPgx{
			&rt.Url,	&rt.Zusatz,	&rt.Created,
    
  }
}


func (rt *VweburlParams)ROWInsert() db.InterPgx {
  return db.InterPgx{
		&rt.Length,
		&rt.Offset,
}

}



func (t Vweburl) Writer(w io.Writer,trenner string)  error {
		w.Write([]byte(trenner))

if err := json.NewEncoder(w).Encode(t); err != nil {
	return err
}
	return nil
}




func ( dst VweburlParams)SQL(flag db.SQLOper)string{


  switch flag{
			
    case db.GenSelectID,  db.GenSelectAll:
    return fmt.Sprintf(db.SQLPattern[flag],
  VweburlSQL.All,
	     "vweburl"	,
      VweburlSQL.PK ,
    )

		case db.GenSelectAll1:
		return fmt.Sprintf(db.SQLPattern[flag],
	VweburlSQL.All,
   "vweburl"	,
  		)


			
  }

	return ""

}




func ( dst Vweburl)SQL(flag db.SQLOper)string{


  switch flag{
			


		case db.GenInsert:
		return  fmt.Sprintf( db.SQLPattern[flag],
			"vweburl"	,
			 VweburlSQL.Inserts  ,
			 VweburlSQL.BindsInsert ,
				VweburlSQL.All,)

				case db.GenDelete:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"vweburl"	,
					VweburlSQL.PK,
						VweburlSQL.All,)
				case db.GenUpdate:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"vweburl"	,
					VweburlSQL.BindsUpdate  ,
								VweburlSQL.PKUpdate,
					VweburlSQL.All,)

			
  }

	return ""

}



type IterVweburl struct {
	db.BaseCopy
	Vweburl Vweburl
}

type ArIterVweburl struct {
	IterVweburl
	ArVweburl ArVweburl
}


				

type MapVweburl map[int32]Vweburl

type MapIterVweburl struct {
		IterVweburl
		MapVweburl  MapVweburl
}

				func (t *MapIterVweburl) NewCopy(rows  *pgx.Rows) int {
				 t.BaseCopy.NewCopy(rows,&t.Vweburl)
				 t.MapVweburl=make(MapVweburl)
					for t.IterVweburl.Next(){
						t.MapVweburl[*t.Vweburl.Id] = t.Vweburl
					}
				 return len(t.MapVweburl)
				}


	



func (t *ArIterVweburl) NewCopy(rows  *pgx.Rows) int {
 t.BaseCopy.NewCopy(rows,&t.Vweburl)
	for t.IterVweburl.Next(){
		t.ArVweburl = append(t.ArVweburl,t.Vweburl)
	}
 return len(t.ArVweburl)
}

func (t *IterVweburl) NewCopy(rows  *pgx.Rows)  {

 t.BaseCopy.NewCopy(rows,&t.Vweburl)
return
}

func (t *IterVweburl) Value() db.PgxGener  {

 return &t.Vweburl
}

func (t *IterVweburl) StartCopy(tab string, con *pgx.Conn, tt pgx.CopyFromSource,rows  *pgx.Rows) (int, error) {

	return t.BaseCopy.StartCopy(tab, con, tt, rows, &t.Vweburl)

}




			
