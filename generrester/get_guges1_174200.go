
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-26 19:47:45.483850197 +0200 CEST
//code for table get_guges1_174200

package generrester



import (
	"restfest/db"
	"fmt"
	"time"
	"io"
	"github.com/jackc/pgx"
			
)

type dummyGet_guges1_174200 time.Time

type Get_guges1_174200Params struct {
    P_start *int32 `schema:"p_start"`
    P_end *int32 `schema:"p_end"`
    P_len *int32 `schema:"p_len"`
    P_lala *string `schema:"p_lala"`
}


type Get_guges1_174200 struct {
    Id int32  `json:"id"`
    Agger ArWeburl  `json:"agger"`
    Texter *string  `json:"texter"`
    Zahler *int32  `json:"zahler"`
    Zahler2 *int32  `json:"zahler2"`
    Texter2 *string  `json:"texter2"`
}

type ArGet_guges1_174200 []Get_guges1_174200



func (t Get_guges1_174200) Columns() []string {
	return []string{	 "id" ,	 "agger" ,	 "texter" ,	 "zahler" ,	 "zahler2" ,	 "texter2" ,
			}
}


func (x *Get_guges1_174200) Scanner() db.InterPgx {
	return db.InterPgx{
				&x.Id,
				&x.Agger,
				&x.Texter,
				&x.Zahler,
				&x.Zahler2,
				&x.Texter2,
			}

}

func (rt *Get_guges1_174200)ROWInsert() db.InterPgx {
	  return db.InterPgx{
		
  }
}


func (rt *Get_guges1_174200Params)ROWInsert() db.InterPgx {
  return db.InterPgx{
		&rt.P_start,
		&rt.P_end,
		&rt.P_len,
		&rt.P_lala,
}

}
				

func (dst *ArGet_guges1_174200) Scanner( rows *pgx.Rows) error {
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return err
		}
		x := new( Get_guges1_174200)
		if err := rows.Scan(x.Scanner()...); err != nil {
			return err
		}
		*dst = append(*dst, *x)
	}
	return nil
}


type BaseCopyGet_guges1_174200 struct {
	Errc      error
	Inter    db.InterPgx
	Rows     *pgx.Rows
	Get_guges1_174200 Get_guges1_174200
}

func (t *BaseCopyGet_guges1_174200) Values() ([]interface{}, error) {
	return t.Inter, t.Errc
}


func (t *BaseCopyGet_guges1_174200) ValuesString() (record []string,err error) {
record, err = t.Inter.ConvertItoS()
return
}


func (t BaseCopyGet_guges1_174200) Err() error {
	if t.Errc != io.EOF {
		return t.Errc
	}
	return nil
}

func (t *BaseCopyGet_guges1_174200) NewCopy(rows  *pgx.Rows)  {

	t.Inter = t.Get_guges1_174200.Scanner()
t.Rows = rows
return
}


func (t *BaseCopyGet_guges1_174200) StartCopy(tab string, con *pgx.Conn, tt pgx.CopyFromSource,rows  *pgx.Rows) error {

	t.Inter = t.Get_guges1_174200.Scanner()
t.Rows = rows
	fmt.Println("vor copy", tab)
	copyCount, err := con.CopyFrom(
		[]string{tab},
		t.Get_guges1_174200.Columns(),
		tt)

	fmt.Println("fertig", copyCount, err)
	if err != nil {
		return err
	}
	return nil
}

func (t *BaseCopyGet_guges1_174200) Next() bool {
	var ok bool
	for {
		ok = t.Rows.Next()
		if !ok {
			break
		}
		t.Rows.Scan(t.Inter...)
		break
	}
	t.Errc = t.Rows.Err()
	if t.Errc != nil {
		return false
	}
	return ok

}



			


func SQLGet_guges1_174200(flag db.SQLOper)string{
  x :=   "id,agger,texter,zahler,zahler2,texter2"

  switch flag{
			

		case db.GenFunction:
		return fmt.Sprintf(db.SQLPattern[flag],
		x,
 "get_guges1" ,
 "$1,$2,$3,$4"	,
		)


  }

	return ""

}
