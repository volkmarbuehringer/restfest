
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-20 21:11:00.947942706 +0200 CEST
//code for table weburl

package generrester



import (
	"restfest/db"
	"fmt"
	"time"

			
			"github.com/jackc/pgx/pgtype"
		"github.com/jackc/pgx"
		
)

type dummyWeburl time.Time

type WeburlParams struct {
    Length int `schema:"length"`
    Offset int `schema:"offset"`
}


type Weburl struct {
    Id int32  `json:"id"`
    Url *string  `json:"url"`
    Zusatz *int64  `json:"zusatz"`
    Created *time.Time  `json:"created"`
    W_cr_date *time.Time  `json:"w_cr_date"`
    W_upd_date *time.Time  `json:"w_upd_date"`
    W_upd_uid *string  `json:"w_upd_uid"`
    W_cr_uid *string  `json:"w_cr_uid"`
    Addtime *time.Time  `json:"addtime"`
    Addtime1 *time.Time  `json:"addtime1"`
    Flag bool  `json:"flag"`
    Test *float64  `json:"test"`
}

type ArWeburl []Weburl

			
func ConnectorWeburl(con *pgx.Conn, oida pgtype.Oid,oid pgtype.Oid) error {
	con.ConnInfo.RegisterDataType(pgtype.DataType{
		Value: &ArWeburl{},
		Name:  "ArWeburl",
		Oid:  oida,
	})
	con.ConnInfo.RegisterDataType(pgtype.DataType{
		Value: &Weburl{},
		Name:  "Weburl",
		Oid:  oid,
	})
	return nil
}

func (src *ArWeburl) AssignTo(dst interface{}) error {

	if src != nil {
		ttt, ok := dst.(*ArWeburl)
		if !ok {
				return fmt.Errorf("cannot assign %v to %T", src, dst)
		}
		*ttt = *src
	}
	return nil
}

func (dst *ArWeburl) Set(src interface{}) error {
	return fmt.Errorf("cannot convert %v to ArWeburl", src)
}

func (dst *ArWeburl) Get() interface{} {
	return dst
}





func (src *Weburl) AssignTo(dst interface{}) error {
	if src != nil {
		ttt, ok := dst.(*Weburl)
		if !ok {
				return fmt.Errorf("cannot assign %v to %T", src, dst)
		}
		*ttt = *src
	}
	return nil
}

func (dst *Weburl) Set(src interface{}) error {
	return fmt.Errorf("cannot convert %v to Weburl", src)
}

func (dst *Weburl) Get() interface{} {
return dst
}

func (dst *Weburl) DecodeBinary(ci *pgtype.ConnInfo, src []byte) error {
	if src == nil {
			return nil
	}
	struT := new(Weburl)

d:=  ScannerWeburlI(struT)

	err := d.DecodeBinary(ci,src)
	if err != nil {
		return err
	}
	*dst = *struT
	return nil
}

func (dst *ArWeburl) DecodeBinary(ci *pgtype.ConnInfo, src []byte) error {
	if src == nil {
		return nil
	}
	elements := make(ArWeburl, 0)
	funcer := func (result *ArWeburl) func() db.InterPgx {
		return func() db.InterPgx {
			pos := len(*result)
			*result = append(*result,Weburl{})

			return ScannerWeburlI(&(*result)[pos])
		}
	}

	helperfun := funcer(&elements)
	err := db.Helper(ci, src, helperfun)
 if err != nil {
	 return err
 }
	*dst = elements
	return nil
}




func ScannerWeburlI(struT *Weburl)  db.InterPgx  {

	return []interface{}{
				&struT.Id,
				&struT.Url,
				&struT.Zusatz,
				&struT.Created,
				&struT.W_cr_date,
				&struT.W_upd_date,
				&struT.W_upd_uid,
				&struT.W_cr_uid,
				&struT.Addtime,
				&struT.Addtime1,
				&struT.Flag,
				&struT.Test,
			}

}


func SQLWeburl(flag db.SQLOper)string{
  x :=   "id,url,zusatz,created,w_cr_date,w_upd_date,w_upd_uid,w_cr_uid,addtime,addtime1,flag,test"

  switch flag{
			
    case db.GenSelectID,  db.GenSelectAll:
    return fmt.Sprintf(db.SQLPattern[flag],
    x,
	     "weburl"	,
      "id" ,
    )

		case db.GenSelectAll1:
		return fmt.Sprintf(db.SQLPattern[flag],
		x,
   "weburl"	,
  		)

		case db.GenInsert:
		return  fmt.Sprintf( db.SQLPattern[flag],
			"weburl"	,
			 "url,zusatz,created,w_cr_date,w_cr_uid,addtime,addtime1,flag,test"  ,
			 "$1,$2,$3,current_timestamp,'webSrv',$4,$5,$6,$7" ,
				x)

				case db.GenDelete:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"weburl"	,
						"id",
						x)
				case db.GenUpdate:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"weburl"	,
						"url=$1,zusatz=$2,created=$3,w_upd_date=current_timestamp,w_upd_uid='webSrv',addtime=$4,addtime1=$5,flag=$6,test=$7"  ,
						"id=$8",
					x)

			
  }

	return ""

}


func EmptyWeburl() interface{}{
    return new(Weburl)
}


func EmptyParamWeburl() interface{}{

 rt := new(WeburlParams)

	
		rt.Length=100
	

    return rt
}

func ScannerWeburl()(  db.InterPgx , interface{}){
	struT := new(Weburl)

return  ScannerWeburlI(struT), struT

}


func ROWInsertWeburl(inter interface{}) db.InterPgx {
					
  rt := inter.( *Weburl )
	
  return []interface{}{
				
	&rt.Url,
	&rt.Zusatz,
	&rt.Created,
	&rt.Addtime,
	&rt.Addtime1,
	&rt.Flag,
	&rt.Test,

  }

}


func ROWQueryWeburl(inter interface{}) db.InterPgx {
  rt := inter.( *WeburlParams )

  return []interface{}{
		&rt.Length,
		&rt.Offset,
}

}
