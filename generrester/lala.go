
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-20 21:11:00.631313772 +0200 CEST
//code for table lala

package generrester



import (
	"restfest/db"
	"fmt"
	"time"

			
			"github.com/jackc/pgx/pgtype"
		"github.com/jackc/pgx"
		
)

type dummyLala time.Time

type LalaParams struct {
    Length int `schema:"length"`
    Offset int `schema:"offset"`
}


type Lala struct {
    Id *int32  `json:"id"`
    Maxer *int32  `json:"maxer"`
    Miner *int32  `json:"miner"`
    Da *time.Time  `json:"da"`
    Haha ArWeburl  `json:"haha"`
    Mist ArWeburl  `json:"mist"`
    Lump ArWeburl  `json:"lump"`
}

type ArLala []Lala

			
func ConnectorLala(con *pgx.Conn, oida pgtype.Oid,oid pgtype.Oid) error {
	con.ConnInfo.RegisterDataType(pgtype.DataType{
		Value: &ArLala{},
		Name:  "ArLala",
		Oid:  oida,
	})
	con.ConnInfo.RegisterDataType(pgtype.DataType{
		Value: &Lala{},
		Name:  "Lala",
		Oid:  oid,
	})
	return nil
}

func (src *ArLala) AssignTo(dst interface{}) error {

	if src != nil {
		ttt, ok := dst.(*ArLala)
		if !ok {
				return fmt.Errorf("cannot assign %v to %T", src, dst)
		}
		*ttt = *src
	}
	return nil
}

func (dst *ArLala) Set(src interface{}) error {
	return fmt.Errorf("cannot convert %v to ArLala", src)
}

func (dst *ArLala) Get() interface{} {
	return dst
}





func (src *Lala) AssignTo(dst interface{}) error {
	if src != nil {
		ttt, ok := dst.(*Lala)
		if !ok {
				return fmt.Errorf("cannot assign %v to %T", src, dst)
		}
		*ttt = *src
	}
	return nil
}

func (dst *Lala) Set(src interface{}) error {
	return fmt.Errorf("cannot convert %v to Lala", src)
}

func (dst *Lala) Get() interface{} {
return dst
}

func (dst *Lala) DecodeBinary(ci *pgtype.ConnInfo, src []byte) error {
	if src == nil {
			return nil
	}
	struT := new(Lala)

d:=  ScannerLalaI(struT)

	err := d.DecodeBinary(ci,src)
	if err != nil {
		return err
	}
	*dst = *struT
	return nil
}

func (dst *ArLala) DecodeBinary(ci *pgtype.ConnInfo, src []byte) error {
	if src == nil {
		return nil
	}
	elements := make(ArLala, 0)
	funcer := func (result *ArLala) func() db.InterPgx {
		return func() db.InterPgx {
			pos := len(*result)
			*result = append(*result,Lala{})

			return ScannerLalaI(&(*result)[pos])
		}
	}

	helperfun := funcer(&elements)
	err := db.Helper(ci, src, helperfun)
 if err != nil {
	 return err
 }
	*dst = elements
	return nil
}




func ScannerLalaI(struT *Lala)  db.InterPgx  {

	return []interface{}{
				&struT.Id,
				&struT.Maxer,
				&struT.Miner,
				&struT.Da,
				&struT.Haha,
				&struT.Mist,
				&struT.Lump,
			}

}


func SQLLala(flag db.SQLOper)string{
  x :=   "id,maxer,miner,da,haha,mist,lump"

  switch flag{
			
    case db.GenSelectID,  db.GenSelectAll:
    return fmt.Sprintf(db.SQLPattern[flag],
    x,
	     "lala"	,
      "id" ,
    )

		case db.GenSelectAll1:
		return fmt.Sprintf(db.SQLPattern[flag],
		x,
   "lala"	,
  		)

		case db.GenInsert:
		return  fmt.Sprintf( db.SQLPattern[flag],
			"lala"	,
			 "maxer,miner,da,haha,mist,lump"  ,
			 "$1,$2,$3,$4,$5,$6" ,
				x)

				case db.GenDelete:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"lala"	,
						"id",
						x)
				case db.GenUpdate:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"lala"	,
						"maxer=$1,miner=$2,da=$3,haha=$4,mist=$5,lump=$6"  ,
						"id=$7",
					x)

			
  }

	return ""

}


func EmptyLala() interface{}{
    return new(Lala)
}


func EmptyParamLala() interface{}{

 rt := new(LalaParams)

	
		rt.Length=100
	

    return rt
}

func ScannerLala()(  db.InterPgx , interface{}){
	struT := new(Lala)

return  ScannerLalaI(struT), struT

}


func ROWInsertLala(inter interface{}) db.InterPgx {
					
  rt := inter.( *Lala )
	
  return []interface{}{
				
	&rt.Maxer,
	&rt.Miner,
	&rt.Da,
	&rt.Haha,
	&rt.Mist,
	&rt.Lump,

  }

}


func ROWQueryLala(inter interface{}) db.InterPgx {
  rt := inter.( *LalaParams )

  return []interface{}{
		&rt.Length,
		&rt.Offset,
}

}
