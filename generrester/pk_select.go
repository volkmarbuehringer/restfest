
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-26 19:47:45.62816129 +0200 CEST
//code for table pk_select

package generrester



import (
	"restfest/db"
	"fmt"
	"time"
	"io"
	"github.com/jackc/pgx"
			
)

type dummyPk_select time.Time

type Pk_selectParams struct {
    Length int `schema:"length"`
    Offset int `schema:"offset"`
}


type Pk_select struct {
    Table_name *string  `json:"table_name"`
    Column_name *string  `json:"column_name"`
}

type ArPk_select []Pk_select



func (t Pk_select) Columns() []string {
	return []string{	 "table_name" ,	 "column_name" ,
			}
}


func (x *Pk_select) Scanner() db.InterPgx {
	return db.InterPgx{
				&x.Table_name,
				&x.Column_name,
			}

}

func (rt *Pk_select)ROWInsert() db.InterPgx {
	  return db.InterPgx{
			&rt.Column_name,
    
  }
}


func (rt *Pk_selectParams)ROWInsert() db.InterPgx {
  return db.InterPgx{
		&rt.Length,
		&rt.Offset,
}

}
				
				type MapPk_select map[string]Pk_select
func (dst *MapPk_select) Scanner( rows *pgx.Rows) error {

	for rows.Next() {
		if err := rows.Err(); err != nil {
			return err
		}
		x := new( Pk_select)
		if err := rows.Scan(x.Scanner()...); err != nil {
			return err
		}
		(*dst)[*x.Table_name] = *x
	}

	return nil
}
	

func (dst *ArPk_select) Scanner( rows *pgx.Rows) error {
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return err
		}
		x := new( Pk_select)
		if err := rows.Scan(x.Scanner()...); err != nil {
			return err
		}
		*dst = append(*dst, *x)
	}
	return nil
}


type BaseCopyPk_select struct {
	Errc      error
	Inter    db.InterPgx
	Rows     *pgx.Rows
	Pk_select Pk_select
}

func (t *BaseCopyPk_select) Values() ([]interface{}, error) {
	return t.Inter, t.Errc
}


func (t *BaseCopyPk_select) ValuesString() (record []string,err error) {
record, err = t.Inter.ConvertItoS()
return
}


func (t BaseCopyPk_select) Err() error {
	if t.Errc != io.EOF {
		return t.Errc
	}
	return nil
}

func (t *BaseCopyPk_select) NewCopy(rows  *pgx.Rows)  {

	t.Inter = t.Pk_select.Scanner()
t.Rows = rows
return
}


func (t *BaseCopyPk_select) StartCopy(tab string, con *pgx.Conn, tt pgx.CopyFromSource,rows  *pgx.Rows) error {

	t.Inter = t.Pk_select.Scanner()
t.Rows = rows
	fmt.Println("vor copy", tab)
	copyCount, err := con.CopyFrom(
		[]string{tab},
		t.Pk_select.Columns(),
		tt)

	fmt.Println("fertig", copyCount, err)
	if err != nil {
		return err
	}
	return nil
}

func (t *BaseCopyPk_select) Next() bool {
	var ok bool
	for {
		ok = t.Rows.Next()
		if !ok {
			break
		}
		t.Rows.Scan(t.Inter...)
		break
	}
	t.Errc = t.Rows.Err()
	if t.Errc != nil {
		return false
	}
	return ok

}



			


func SQLPk_select(flag db.SQLOper)string{
  x :=   "table_name,column_name"

  switch flag{
			
    case db.GenSelectID,  db.GenSelectAll:
    return fmt.Sprintf(db.SQLPattern[flag],
    x,
	     "pk_select"	,
      "table_name" ,
    )

		case db.GenSelectAll1:
		return fmt.Sprintf(db.SQLPattern[flag],
		x,
   "pk_select"	,
  		)

		case db.GenInsert:
		return  fmt.Sprintf( db.SQLPattern[flag],
			"pk_select"	,
			 "column_name"  ,
			 "$1" ,
				x)

				case db.GenDelete:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"pk_select"	,
						"table_name",
						x)
				case db.GenUpdate:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"pk_select"	,
						"column_name=$1"  ,
						"table_name=$2",
					x)

			
  }

	return ""

}
