
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-20 21:11:00.744300443 +0200 CEST
//code for table testa

package generrester



import (
	"restfest/db"
	"fmt"
	"time"

			
)

type dummyTesta time.Time

type TestaParams struct {
    Length int `schema:"length"`
    Offset int `schema:"offset"`
}


type Testa struct {
    Id int32  `json:"id"`
    T *map[string]interface{}  `json:"t"`
}

type ArTesta []Testa

			

func ScannerTestaI(struT *Testa)  db.InterPgx  {

	return []interface{}{
				&struT.Id,
				&struT.T,
			}

}


func SQLTesta(flag db.SQLOper)string{
  x :=   "id,t"

  switch flag{
			
    case db.GenSelectID,  db.GenSelectAll:
    return fmt.Sprintf(db.SQLPattern[flag],
    x,
	     "testa"	,
      "id" ,
    )

		case db.GenSelectAll1:
		return fmt.Sprintf(db.SQLPattern[flag],
		x,
   "testa"	,
  		)

		case db.GenInsert:
		return  fmt.Sprintf( db.SQLPattern[flag],
			"testa"	,
			 "t"  ,
			 "$1" ,
				x)

				case db.GenDelete:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"testa"	,
						"id",
						x)
				case db.GenUpdate:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"testa"	,
						"t=$1"  ,
						"id=$2",
					x)

			
  }

	return ""

}


func EmptyTesta() interface{}{
    return new(Testa)
}


func EmptyParamTesta() interface{}{

 rt := new(TestaParams)

	
		rt.Length=100
	

    return rt
}

func ScannerTesta()(  db.InterPgx , interface{}){
	struT := new(Testa)

return  ScannerTestaI(struT), struT

}


func ROWInsertTesta(inter interface{}) db.InterPgx {
					
  rt := inter.( *Testa )
	
  return []interface{}{
				
	&rt.T,

  }

}


func ROWQueryTesta(inter interface{}) db.InterPgx {
  rt := inter.( *TestaParams )

  return []interface{}{
		&rt.Length,
		&rt.Offset,
}

}
