
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-21 22:14:12.608673086 +0200 CEST
//code for table testa

package generrester



import (
	"restfest/db"
	"fmt"
	"time"

			
)

type dummyTesta time.Time

type TestaParams struct {
    Length int `schema:"length"`
    Offset int `schema:"offset"`
}


type Testa struct {
    Id int32  `json:"id"`
    T *map[string]interface{}  `json:"t"`
}

type ArTesta []Testa

func (x *Testa) Scanner() db.InterPgx {
	return db.InterPgx{
				&x.Id,
				&x.T,
			}

}

func (rt *Testa)ROWInsert() db.InterPgx {
	  return db.InterPgx{
			&rt.T,
    
  }
}


func (rt *TestaParams)ROWInsert() db.InterPgx {
  return db.InterPgx{
		&rt.Length,
		&rt.Offset,
}

}


			


func SQLTesta(flag db.SQLOper)string{
  x :=   "id,t"

  switch flag{
			
    case db.GenSelectID,  db.GenSelectAll:
    return fmt.Sprintf(db.SQLPattern[flag],
    x,
	     "testa"	,
      "id" ,
    )

		case db.GenSelectAll1:
		return fmt.Sprintf(db.SQLPattern[flag],
		x,
   "testa"	,
  		)

		case db.GenInsert:
		return  fmt.Sprintf( db.SQLPattern[flag],
			"testa"	,
			 "t"  ,
			 "$1" ,
				x)

				case db.GenDelete:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"testa"	,
						"id",
						x)
				case db.GenUpdate:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"testa"	,
						"t=$1"  ,
						"id=$2",
					x)

			
  }

	return ""

}
