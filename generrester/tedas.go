
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-22 11:19:25.022151631 +0200 CEST
//code for table tedas

package generrester



import (
	"restfest/db"
	"fmt"
	"time"
	"github.com/jackc/pgx"
			
)

type dummyTedas time.Time

type TedasParams struct {
    Length int `schema:"length"`
    Offset int `schema:"offset"`
}


type Tedas struct {
    Id int32  `json:"id"`
    Agg []int32  `json:"agg"`
}

type ArTedas []Tedas

func (x *Tedas) Scanner() db.InterPgx {
	return db.InterPgx{
				&x.Id,
				&x.Agg,
			}

}

func (rt *Tedas)ROWInsert() db.InterPgx {
	  return db.InterPgx{
			&rt.Agg,
    
  }
}


func (rt *TedasParams)ROWInsert() db.InterPgx {
  return db.InterPgx{
		&rt.Length,
		&rt.Offset,
}

}


func (dst *ArTedas) Scanner( rows *pgx.Rows) error {
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return err
		}
		x := new( Tedas)
		if err := rows.Scan(x.Scanner()...); err != nil {
			return err
		}
		*dst = append(*dst, *x)
	}
	return nil
}


			


func SQLTedas(flag db.SQLOper)string{
  x :=   "id,agg"

  switch flag{
			
    case db.GenSelectID,  db.GenSelectAll:
    return fmt.Sprintf(db.SQLPattern[flag],
    x,
	     "tedas"	,
      "id" ,
    )

		case db.GenSelectAll1:
		return fmt.Sprintf(db.SQLPattern[flag],
		x,
   "tedas"	,
  		)

		case db.GenInsert:
		return  fmt.Sprintf( db.SQLPattern[flag],
			"tedas"	,
			 "agg"  ,
			 "$1" ,
				x)

				case db.GenDelete:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"tedas"	,
						"id",
						x)
				case db.GenUpdate:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"tedas"	,
						"agg=$1"  ,
						"id=$2",
					x)

			
  }

	return ""

}
