
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-20 21:11:00.572992991 +0200 CEST
//code for table guges1

package generrester



import (
	"restfest/db"
	"fmt"
	"time"

			
)

type dummyGuges1 time.Time

type Guges1Params struct {
    Length int `schema:"length"`
    Offset int `schema:"offset"`
}


type Guges1 struct {
    Id int32  `json:"id"`
    Agger ArWeburl  `json:"agger"`
    Texter *string  `json:"texter"`
    Zahler *int32  `json:"zahler"`
    Zahler2 *int32  `json:"zahler2"`
    Texter2 *string  `json:"texter2"`
}

type ArGuges1 []Guges1

			

func ScannerGuges1I(struT *Guges1)  db.InterPgx  {

	return []interface{}{
				&struT.Id,
				&struT.Agger,
				&struT.Texter,
				&struT.Zahler,
				&struT.Zahler2,
				&struT.Texter2,
			}

}


func SQLGuges1(flag db.SQLOper)string{
  x :=   "id,agger,texter,zahler,zahler2,texter2"

  switch flag{
			
    case db.GenSelectID,  db.GenSelectAll:
    return fmt.Sprintf(db.SQLPattern[flag],
    x,
	     "guges1"	,
      "id" ,
    )

		case db.GenSelectAll1:
		return fmt.Sprintf(db.SQLPattern[flag],
		x,
   "guges1"	,
  		)

		case db.GenInsert:
		return  fmt.Sprintf( db.SQLPattern[flag],
			"guges1"	,
			 "agger,texter,zahler,zahler2,texter2"  ,
			 "$1,$2,$3,$4,$5" ,
				x)

				case db.GenDelete:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"guges1"	,
						"id",
						x)
				case db.GenUpdate:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"guges1"	,
						"agger=$1,texter=$2,zahler=$3,zahler2=$4,texter2=$5"  ,
						"id=$6",
					x)

			
  }

	return ""

}


func EmptyGuges1() interface{}{
    return new(Guges1)
}


func EmptyParamGuges1() interface{}{

 rt := new(Guges1Params)

	
		rt.Length=100
	

    return rt
}

func ScannerGuges1()(  db.InterPgx , interface{}){
	struT := new(Guges1)

return  ScannerGuges1I(struT), struT

}


func ROWInsertGuges1(inter interface{}) db.InterPgx {
					
  rt := inter.( *Guges1 )
	
  return []interface{}{
				
	&rt.Agger,
	&rt.Texter,
	&rt.Zahler,
	&rt.Zahler2,
	&rt.Texter2,

  }

}


func ROWQueryGuges1(inter interface{}) db.InterPgx {
  rt := inter.( *Guges1Params )

  return []interface{}{
		&rt.Length,
		&rt.Offset,
}

}
