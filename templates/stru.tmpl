
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// {{ .Timestamp }}
//code for table {{.Table}}

package gener


import (
	"restfest/db"
)

type {{title .Table}}Params struct {
	  {{- range .Parameters  }}
    {{title .Column}} {{.ColumnTrans}} `schema:"{{.Column}}"`
	    {{- end }}
}


type {{title .Table}} struct {
  {{- range .Cols  }}
    {{title .Column}} {{.ColumnTrans}}  `json:{{printf "%q" .Column}}`
    {{- end }}
}



func SQL{{title .Table}}(flag db.SQLOper)[]interface{}{
  x :=   {{printf "%q" (joiner .ColumnsT)}}

  switch flag{
    case db.GenSelect:
    return []interface{}{
    x,
		{{if .Flagger}}       {{printf "%q" .Table}}	{{else}} {{printf "%q" .PK}} {{end}},
    	{{if .Flagger}}   {{printf "%q" .PK}} {{else}}  {{printf "%q" (joiner .BindsVarInsert)}}	{{end}},
    }
			{{if .Flagger}}
    case db.GenInsert:
    return    []interface{}{   {{printf "%q" .Table}}	,
       {{printf "%q" (joiner .ColumnsInsert)  }}  ,
       {{printf "%q" (joiner .BindsInsert)  }} ,
        x,
      }
    default:
      return    []interface{}{   {{printf "%q" .Table}}	,
        {{printf "%q" (joiner .BindsUpdate)}}  ,
        {{printf "%q" .PKBind}},
      x,
        }
{{end}}
  }
			{{if .Flagger}}
			{{else}}
	return nil
{{end}}
}


func Empty{{title .Table}}() interface{}{
    return new({{title .Table}})
}


func EmptyParam{{title .Table}}() interface{}{
    return new({{title .Table}}Params)
}

func Scanner{{title .Table}}()( []interface{}, interface{}){
	struT := new({{title .Table}})

return  []interface{}{				{{- range .Cols  }}
				&struT.{{title .Column}},
				{{- end }}
			}, struT

}


func ScannerT{{title .Table}}()( []interface{},*{{title .Table}}){
	struT := new({{title .Table}})

return  []interface{}{				{{- range .Cols  }}
				&struT.{{title .Column}},
				{{- end }}
			}, struT

}


func ROWInsert{{title .Table}}(inter interface{})[]interface{}{
					{{if .Flagger}}
  rt := inter.( *{{title .Table}} )
	{{end}}
  return []interface{}{
				{{if .Flagger}}
	{{- range .BindsVarInsert  }}
	&rt.{{title .}},
	{{- end }}
{{end}}
  }

}


func ROWQuery{{title .Table}}(inter interface{})[]interface{}{
  rt := inter.( *{{title .Table}}Params )

{{if .Flagger}} if !rt.Length.Valid {
	rt.Length.Int64=100
	rt.Length.Valid=true
} {{end}}

  return []interface{}{
		{{- range .Parameters }}
		&rt.{{title .Column}},
		{{- end }}
}

}
