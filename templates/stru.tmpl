
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// {{ .Timestamp }}
//code for table {{.Table}}

package gener{{.Package}}



import (
	"restfest/db"
	"fmt"
	"time"
	"github.com/jackc/pgx"
			{{if .FlaggerUdt}}
			"github.com/jackc/pgx/pgtype"
		{{end}}
)

{{$z := title .Table -}}
{{$a := (title .Table) | printf "%s%s" "Ar" -}}

type dummy{{$z}} time.Time

type {{$z}}Params struct {
	  {{- range .Parameters  }}
    {{title .Column}} {{.ColumnTrans}} `schema:"{{.Column}}"`
	    {{- end }}
}


type {{$z}} struct {
  {{- range .Cols  }}
    {{title .Column}} {{.ColumnTrans}}  `json:{{printf "%q" .Column}}`
    {{- end }}
}

type {{$a}} []{{$z}}



func (t {{$z}}) Columns() []string {
	return []string{
		 {{- range .BindsVarInsert  }}	 {{printf "%q" .}} ,	{{- end }}
			}
}




func (x *{{$z}}) Scanner() db.InterPgx {
	return db.InterPgx{
		{{- range .Cols  }}
				&x.{{title .Column}},
				{{- end }}
			}

}

func (rt *{{$z}})ROWInsert() db.InterPgx {
	  return db.InterPgx{
		{{if .Flagger}}
	    {{- range .BindsVarInsert  }}	&rt.{{title .}},	{{- end }}
    {{end}}
  }
}


func (rt *{{$z}}Params)ROWInsert() db.InterPgx {
  return db.InterPgx{
		{{- range .Parameters }}
		&rt.{{title .Column}},
		{{- end }}
}

}
				{{if .Flagger}}
				type Map{{$z}} map[{{.PKType}}]{{$z}}
func (dst *Map{{$z}}) Scanner( rows *pgx.Rows) error {

	for rows.Next() {
		if err := rows.Err(); err != nil {
			return err
		}
		x := new( {{$z}})
		if err := rows.Scan(x.Scanner()...); err != nil {
			return err
		}
		(*dst)[{{.PKPtr}}x.{{title .PK}}] = *x
	}

	return nil
}
	{{end}}

func (dst *{{$a}}) Scanner( rows *pgx.Rows) error {
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return err
		}
		x := new( {{$z}})
		if err := rows.Scan(x.Scanner()...); err != nil {
			return err
		}
		*dst = append(*dst, *x)
	}
	return nil
}


			{{if .FlaggerUdt}}


func (src *{{$a}}) AssignTo(dst interface{}) error {

	if src != nil {
		ttt, ok := dst.(*{{$a}})
		if !ok {
				return fmt.Errorf("cannot assign %v to %T", src, dst)
		}
		*ttt = *src
	}
	return nil
}

func (dst *{{$a}}) Set(src interface{}) error {
	return fmt.Errorf("cannot convert %v to {{$a}}", src)
}

func (dst *{{$a}}) Get() interface{} {
	return dst
}





func (src *{{$z}}) AssignTo(dst interface{}) error {
	if src != nil {
		ttt, ok := dst.(*{{$z}})
		if !ok {
				return fmt.Errorf("cannot assign %v to %T", src, dst)
		}
		*ttt = *src
	}
	return nil
}

func (dst *{{$z}}) Set(src interface{}) error {
	return fmt.Errorf("cannot convert %v to {{$z}}", src)
}

func (dst *{{$z}}) Get() interface{} {
return dst
}

func (dst *{{$z}}) DecodeBinary(ci *pgtype.ConnInfo, src []byte) error {
	if src == nil {
			return nil
	}

	struT := new({{title .Table}})

d:=  struT.Scanner()

	err := d.DecodeBinary(ci,src)
	if err != nil {
		return err
	}
	*dst = *struT
	return nil
}



func (dst *{{$a}}) DecodeBinary(ci *pgtype.ConnInfo, src []byte) error {
	if src == nil {
		return nil
	}
	elements := make({{$a}}, 0)
	funcer := func (result *{{$a}}) func() db.InterPgx {
		return func() db.InterPgx {
			pos := len(*result)
			*result = append(*result,{{$z}}{})
			return (*result)[pos].Scanner()
		}
	}

	helperfun := funcer(&elements)
	err := db.Helper(ci, src, helperfun)
 if err != nil {
	 return err
 }
	*dst = elements
	return nil
}


{{end}}


func SQL{{$z}}(flag db.SQLOper)string{
  x :=   {{printf "%q" (joiner .ColumnsT)}}

  switch flag{
			{{if .Flagger}}
    case db.GenSelectID,  db.GenSelectAll:
    return fmt.Sprintf(db.SQLPattern[flag],
    x,
	     {{printf "%q" .Table}}	,
      {{printf "%q" .PK}} ,
    )

		case db.GenSelectAll1:
		return fmt.Sprintf(db.SQLPattern[flag],
		x,
   {{printf "%q" .Table}}	,
  		)

		case db.GenInsert:
		return  fmt.Sprintf( db.SQLPattern[flag],
			{{printf "%q" .Table}}	,
			 {{printf "%q" (joiner .ColumnsInsert)  }}  ,
			 {{printf "%q" (joiner .BindsInsert)  }} ,
				x)

				case db.GenDelete:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					{{printf "%q" .Table}}	,
						{{printf "%q" .PK}},
						x)
				case db.GenUpdate:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					{{printf "%q" .Table}}	,
						{{printf "%q" (joiner .BindsUpdate)}}  ,
						{{printf "%q" .PKBind}},
					x)

			{{else}}

		case db.GenFunction:
		return fmt.Sprintf(db.SQLPattern[flag],
		x,
 {{printf "%q" .PK}} ,
 {{printf "%q" (joiner .BindsVarInsert)}}	,
		)

{{end}}
  }

	return ""

}
