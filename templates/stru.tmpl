
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// {{ .Timestamp }}
//code for table {{.Table}}

package gener{{.Package}}



import (
	"restfest/db"
	"fmt"
	"time"
			{{if .FlaggerUdt}}
		"github.com/jackc/pgx/pgtype"
		"github.com/jackc/pgx"
		{{end}}
)

{{$z := title .Table -}}
{{$a := (title .Table) | printf "%s%s" "Ar" -}}

var dummy{{$z}} time.Time

type {{$z}}Params struct {
	  {{- range .Parameters  }}
    {{title .Column}} {{.ColumnTrans}} `schema:"{{.Column}}"`
	    {{- end }}
}


type {{$z}} struct {
  {{- range .Cols  }}
    {{title .Column}} {{.ColumnTrans}}  `json:{{printf "%q" .Column}}`
    {{- end }}
}

type {{$a}} []{{$z}}

			{{if .FlaggerUdt}}
func Connector{{$z}}(con *pgx.Conn) error {
	con.ConnInfo.RegisterDataType(pgtype.DataType{
		Value: &{{$a}}{},
		Name:  {{printf "%q" $a}},
		Oid:   {{.OIDAr}},
	})
	con.ConnInfo.RegisterDataType(pgtype.DataType{
		Value: &{{$z}}{},
		Name:  {{printf "%q" $z}},
		Oid:   {{.OID}},
	})
	return nil
}

func (src *{{$a}}) AssignTo(dst interface{}) error {
	return fmt.Errorf("cannot assign %v to %T", src, dst)
}

func (dst *{{$a}}) Set(src interface{}) error {
	return fmt.Errorf("cannot convert %v to Point", src)
}

func (dst *{{$a}}) Get() interface{} {
	return nil
}



func (src *{{$z}}) AssignTo(dst interface{}) error {
	return fmt.Errorf("cannot assign %v to %T", src, dst)
}

func (dst *{{$z}}) Set(src interface{}) error {
	return fmt.Errorf("cannot convert %v to Point", src)
}

func (dst *{{$z}}) Get() interface{} {
	return nil
}

func (dst *{{$z}}) DecodeBinary(ci *pgtype.ConnInfo, src []byte) error {
	if src == nil {
			return nil
	}
	struT := new({{title .Table}})

d:=  Scanner{{title .Table}}I(struT)

	err := d.DecodeBinary(ci,src)
	if err != nil {
		return err
	}
	*dst = *struT
	return nil
}

func (dst *{{$a}}) DecodeBinary(ci *pgtype.ConnInfo, src []byte) error {
	if src == nil {
		return nil
	}
	elements := make({{$a}}, 0)
	helperfun := helper{{$z}}(&elements)
	err := db.Helper(ci, src, helperfun)
 if err != nil {
	 return err
 }
	*dst = elements
	return nil
}

func helper{{$z}}(result *{{$a}}) func() db.InterPgx {
	return func() db.InterPgx {
		pos := len(*result)
		*result = append(*result,{{$z}}{})

		return Scanner{{$z}}I(&(*result)[pos])
	}
}

{{end}}

func Scanner{{$z}}I(struT *{{$z}})  db.InterPgx  {

	return []interface{}{
		{{- range .Cols  }}
				&struT.{{title .Column}},
				{{- end }}
			}

}


func SQL{{$z}}(flag db.SQLOper)string{
  x :=   {{printf "%q" (joiner .ColumnsT)}}

  switch flag{
			{{if .Flagger}}
    case db.GenSelectID,  db.GenSelectAll:
    return fmt.Sprintf(db.SQLPattern[flag],
    x,
	     {{printf "%q" .Table}}	,
      {{printf "%q" .PK}} ,
    )

		case db.GenSelectAll1:
		return fmt.Sprintf(db.SQLPattern[flag],
		x,
   {{printf "%q" .Table}}	,
  		)

		case db.GenInsert:
		return  fmt.Sprintf( db.SQLPattern[flag],
			{{printf "%q" .Table}}	,
			 {{printf "%q" (joiner .ColumnsInsert)  }}  ,
			 {{printf "%q" (joiner .BindsInsert)  }} ,
				x)

				case db.GenDelete:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					{{printf "%q" .Table}}	,
						{{printf "%q" .PK}},
						x)
				case db.GenUpdate:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					{{printf "%q" .Table}}	,
						{{printf "%q" (joiner .BindsUpdate)}}  ,
						{{printf "%q" .PKBind}},
					x)

			{{else}}

		case db.GenFunction:
		return fmt.Sprintf(db.SQLPattern[flag],
		x,
 {{printf "%q" .PK}} ,
 {{printf "%q" (joiner .BindsVarInsert)}}	,
		)

{{end}}
  }

	return ""

}


func Empty{{$z}}() interface{}{
    return new({{title .Table}})
}


func EmptyParam{{title .Table}}() interface{}{

 rt := new({{title .Table}}Params)

	{{if .Flagger}}
		rt.Length=100
	{{end}}

    return rt
}

func Scanner{{title .Table}}()(  db.InterPgx , interface{}){
	struT := new({{title .Table}})

return  Scanner{{title .Table}}I(struT), struT

}


func ROWInsert{{title .Table}}(inter interface{}) db.InterPgx {
					{{if .Flagger}}
  rt := inter.( *{{title .Table}} )
	{{end}}
  return []interface{}{
				{{if .Flagger}}
	{{- range .BindsVarInsert  }}
	&rt.{{title .}},
	{{- end }}
{{end}}
  }

}


func ROWQuery{{title .Table}}(inter interface{}) db.InterPgx {
  rt := inter.( *{{title .Table}}Params )

  return []interface{}{
		{{- range .Parameters }}
		&rt.{{title .Column}},
		{{- end }}
}

}
