
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// {{ .Timestamp }}
//code for table {{.Table}}

package gener


import (
	"database/sql"
	"restfest/db"
)

type {{title .Table}} struct {
  {{- range .Cols  }}
    {{title .Column}} {{.ColumnTrans}}  `json:{{printf "%q" .Column}}`
    {{- end }}
}



func SQL{{title .Table}}(tab string,flag db.SQLOper)[]interface{}{
  x :=   {{printf "%q" (joiner .Columns)}}

  switch flag{
    case db.GenSelect:
    return []interface{}{
    x,
      tab,
      {{printf "%q" .PK}},
    }
    case db.GenInsert:
    return    []interface{}{ tab,
       {{printf "%q" (joiner .ColumnsInsert)  }}  ,
       {{printf "%q" (joiner .BindsInsert)  }} ,
        x,
      }
    default:
      return    []interface{}{ tab,
        {{printf "%q" (joiner .BindsUpdate)}}  ,
        {{printf "%q" .PKBind}},
      x,
        }

  }

}


func Empty{{title .Table}}() interface{}{
    return new({{title .Table}})
}

func ROWInsert{{title .Table}}(inter interface{})[]interface{}{
  rt := inter.( *{{title .Table}} )
  return []interface{}{
	{{- range .BindsVarInsert  }}
	&rt.{{title .}},
	{{- end }}  }

}


func ROWS{{title .Table}}(rows *sql.Rows,len int)( stru []interface{},err error){
      t := make( []*{{title .Table}},0)

      for anz:=0;rows.Next();anz++ {
        ts := new({{title .Table}})
        if err = rows.Scan(	{{- range .Cols  }}
				&ts.{{title .Column}},
				{{- end }}); err != nil {
            return
        }
        if len == 1{
            stru = []interface{}{ts}
            return
        }
        t = append(t,ts)
      }
      stru = []interface{}{&t}
      return
}
