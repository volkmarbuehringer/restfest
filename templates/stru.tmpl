
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// {{ .Timestamp }}
//code for table {{.Table}}

package gener



import (
	"restfest/db"
	"fmt"
)

type {{title .Table}}Params struct {
	  {{- range .Parameters  }}
    {{title .Column}} {{.ColumnTrans}} `schema:"{{.Column}}"`
	    {{- end }}
}


type {{title .Table}} struct {
  {{- range .Cols  }}
    {{title .Column}} {{.ColumnTrans}}  `json:{{printf "%q" .Column}}`
    {{- end }}
}



func SQL{{title .Table}}(flag db.SQLOper)string{
  x :=   {{printf "%q" (joiner .ColumnsT)}}

  switch flag{
			{{if .Flagger}}
    case db.GenSelectID:
    return fmt.Sprintf("select %s from " + db.DBschema + ".%s where %s=$1",
    x,
	     {{printf "%q" .Table}}	,
      {{printf "%q" .PK}} ,
    )

		case db.GenSelectAll:
		return fmt.Sprintf("select %s from " + db.DBschema + ".%s order by %s limit $1 offset $2",
		x,
   {{printf "%q" .Table}}	,
  {{printf "%q" .PK}},
		)

		case db.GenInsert:
		return  fmt.Sprintf(   `insert into ` + db.DBschema + `.%s(%s)values(%s) returning %s`,
			{{printf "%q" .Table}}	,
			 {{printf "%q" (joiner .ColumnsInsert)  }}  ,
			 {{printf "%q" (joiner .BindsInsert)  }} ,
				x)

				case db.GenDelete:
				return  fmt.Sprintf(   `delete from ` + db.DBschema + `.%s where %s=$1 returning %s`,
					{{printf "%q" .Table}}	,
						{{printf "%q" .PK}},
						x)
				default:
				return  fmt.Sprintf(  `update ` + db.DBschema + `.%s set %s where %s returning %s`,
					{{printf "%q" .Table}}	,
						{{printf "%q" (joiner .BindsUpdate)}}  ,
						{{printf "%q" .PKBind}},
					x)

			{{else}}

		case db.GenFunction:
		return fmt.Sprintf("select %s from " + db.DBschema + ".%s ( %s )",
		x,
 {{printf "%q" .PK}} ,
 {{printf "%q" (joiner .BindsVarInsert)}}	,
		)

{{end}}
  }
			{{if .Flagger}}
			{{else}}
	return ""
{{end}}
}


func Empty{{title .Table}}() interface{}{
    return new({{title .Table}})
}


func EmptyParam{{title .Table}}() interface{}{

 rt := new({{title .Table}}Params)

	{{if .Flagger}} if !rt.Length.Valid {
		rt.Length.Int64=100
		rt.Length.Valid=true
	} {{end}}

    return rt
}

func Scanner{{title .Table}}()( []interface{}, interface{}){
	struT := new({{title .Table}})

return  []interface{}{				{{- range .Cols  }}
				&struT.{{title .Column}},
				{{- end }}
			}, struT

}


func ScannerT{{title .Table}}()( []interface{},*{{title .Table}}){
	struT := new({{title .Table}})

return  []interface{}{				{{- range .Cols  }}
				&struT.{{title .Column}},
				{{- end }}
			}, struT

}


func ROWInsert{{title .Table}}(inter interface{})[]interface{}{
					{{if .Flagger}}
  rt := inter.( *{{title .Table}} )
	{{end}}
  return []interface{}{
				{{if .Flagger}}
	{{- range .BindsVarInsert  }}
	&rt.{{title .}},
	{{- end }}
{{end}}
  }

}


func ROWQuery{{title .Table}}(inter interface{})[]interface{}{
  rt := inter.( *{{title .Table}}Params )

  return []interface{}{
		{{- range .Parameters }}
		&rt.{{title .Column}},
		{{- end }}
}

}
