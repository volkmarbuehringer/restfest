// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-17 01:44:44.704544014 +0200 CEST
//code for table weburl

package generteststruct

import (
	"fmt"
	"restfest/db"
	"time"

	"github.com/jackc/pgx/pgtype"
)

var dummyWeburl time.Time

type WeburlParams struct {
	Length int `schema:"length"`
	Offset int `schema:"offset"`
}

type Weburl struct {
	Id         int32      `json:"id"`
	Url        *string    `json:"url"`
	Zusatz     *int64     `json:"zusatz"`
	Created    *time.Time `json:"created"`
	W_cr_date  *time.Time `json:"w_cr_date"`
	W_upd_date *time.Time `json:"w_upd_date"`
	W_upd_uid  *string    `json:"w_upd_uid"`
	W_cr_uid   *string    `json:"w_cr_uid"`
	Addtime    *time.Time `json:"addtime"`
	Addtime1   *time.Time `json:"addtime1"`
	Flag       bool       `json:"flag"`
	Test       *float64   `json:"test"`
}

type Weburls []Weburl

func (src *Weburl) AssignTo(dst interface{}) error {
	return fmt.Errorf("cannot assign %v to %T", src, dst)
}

func (dst *Weburl) Set(src interface{}) error {
	return fmt.Errorf("cannot convert %v to Point", src)
}

func (dst *Weburl) Get() interface{} {
	return 0
}

func (src *Weburls) AssignTo(dst interface{}) error {
	return fmt.Errorf("cannot assign %v to %T", src, dst)
}

func (dst *Weburls) Set(src interface{}) error {
	return fmt.Errorf("cannot convert %v to Point", src)
}

func (dst *Weburls) Get() interface{} {
	return nil
}

func (dst *Weburls) DecodeBinary(ci *pgtype.ConnInfo, src []byte) error {
	if src == nil {
		//*dst = Weburl{Status: pgtype.Null}
		//dst = nil
		return nil
	}
	elementCount, rp, err := db.HelperA(ci, src)
	if err != nil {
		return err
	}
	if elementCount == 0 {
		*dst = Weburls{}
		return nil
	}
	elements := make(Weburls, elementCount)
	for i := range elements {
		d := ScannerWeburlI(&elements[i])

		err = d.DecodeBinary(ci, db.HelperC(&rp, src))
		if err != nil {
			return err
		}
	}
	*dst = elements
	return nil
}

func ScannerWeburlI(struT *Weburl) db.InterPgx {

	return []interface{}{
		&struT.Id,
		&struT.Url,
		&struT.Zusatz,
		&struT.Created,
		&struT.W_cr_date,
		&struT.W_upd_date,
		&struT.W_upd_uid,
		&struT.W_cr_uid,
		&struT.Addtime,
		&struT.Addtime1,
		&struT.Flag,
		&struT.Test,
	}

}

func SQLWeburl(flag db.SQLOper) string {
	x := "id,url,zusatz,created,w_cr_date,w_upd_date,w_upd_uid,w_cr_uid,addtime,addtime1,flag,test"

	switch flag {

	case db.GenSelectID, db.GenSelectAll:
		return fmt.Sprintf(db.SQLPattern[flag],
			x,
			"weburl",
			"id",
		)

	case db.GenSelectAll1:
		return fmt.Sprintf(db.SQLPattern[flag],
			x,
			"weburl",
		)

	case db.GenInsert:
		return fmt.Sprintf(db.SQLPattern[flag],
			"weburl",
			"url,zusatz,created,w_cr_date,w_cr_uid,addtime,addtime1,flag,test",
			"$1,$2,$3,current_timestamp,'webSrv',$4,$5,$6,$7",
			x)

	case db.GenDelete:
		return fmt.Sprintf(db.SQLPattern[flag],
			"weburl",
			"id",
			x)
	case db.GenUpdate:
		return fmt.Sprintf(db.SQLPattern[flag],
			"weburl",
			"url=$1,zusatz=$2,created=$3,w_upd_date=current_timestamp,w_upd_uid='webSrv',addtime=$4,addtime1=$5,flag=$6,test=$7",
			"id=$8",
			x)

	}

	return ""

}

func EmptyWeburl() interface{} {
	return new(Weburl)
}

func EmptyParamWeburl() interface{} {

	rt := new(WeburlParams)

	rt.Length = 100

	return rt
}

func ScannerWeburl() ([]interface{}, interface{}) {
	struT := new(Weburl)

	return ScannerWeburlI(struT), struT

}

func ROWInsertWeburl(inter interface{}) []interface{} {

	rt := inter.(*Weburl)

	return []interface{}{

		&rt.Url,
		&rt.Zusatz,
		&rt.Created,
		&rt.Addtime,
		&rt.Addtime1,
		&rt.Flag,
		&rt.Test,
	}

}

func ROWQueryWeburl(inter interface{}) []interface{} {
	rt := inter.(*WeburlParams)

	return []interface{}{
		&rt.Length,
		&rt.Offset,
	}

}
