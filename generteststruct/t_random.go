
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-05-01 10:42:26.791453095 +0200 CEST
//code for table t_random

package generteststruct



import (
	"restfest/db"
	"fmt"
	"time"
	"io"
	"strings"
		"encoding/json"
	"github.com/jackc/pgx"
			
)

type dummyT_random time.Time

type T_randomParams struct {
    Length int
    Offset int
}

var  T_randomSQL  =db.ColumnLists{
	 "id,md5,gaga,fk",
	  "md5,gaga,fk"  ,
		 "$1,$2,$3" ,
	   "id" ,
		 "id=$4",
		"md5,gaga,fk"	 ,
						"md5=$1,gaga=$2,fk=$3"  ,

}


func (x *T_randomParams) Scanner() db.InterPgx {
	return db.InterPgx{
				&x.Length,
				&x.Offset,
			}

}

func (x T_random) Reader(mapper map[string][]string) [][]string {
	return [][]string{
				}

}


func (x T_randomParams) Reader(mapper map[string][]string) [][]string {
	return [][]string{
		mapper["length"],
		mapper["offset"],
			}

}

type T_random struct {
    Id int32  `json:"id"`
    Md5 *string  `json:"md5"`
    Gaga *string  `json:"gaga"`
    Fk *int32  `json:"fk"`
}

type ArT_random []T_random



func (t T_random) Columns() []string {
	return strings.Split(T_randomSQL.All,",")
}


func (x *T_random) Scanner() db.InterPgx {
	return db.InterPgx{
				&x.Id,
				&x.Md5,
				&x.Gaga,
				&x.Fk,
			}

}

func (rt *T_random)ROWInsert() db.InterPgx {
	  return db.InterPgx{
			&rt.Md5,	&rt.Gaga,	&rt.Fk,
    
  }
}


func (rt *T_randomParams)ROWInsert() db.InterPgx {
  return db.InterPgx{
		&rt.Length,
		&rt.Offset,
}

}
				
				type MapT_random map[int32]T_random
				type MapIterT_random struct {
					IterT_random
					MapT_random  MapT_random
				}

				func (t *MapIterT_random) NewCopy(rows  *pgx.Rows) int {
				 t.BaseCopy.NewCopy(rows,&t.T_random)
				 t.MapT_random=make(MapT_random)
					for t.IterT_random.Next(){
						t.MapT_random[t.T_random.Id] = t.T_random
					}
				 return len(t.MapT_random)
				}


	



type IterT_random struct {
	db.BaseCopy
	T_random T_random
}

type ArIterT_random struct {
	IterT_random
	ArT_random ArT_random
}

func (t T_random) Writer(w io.Writer)  error {
if err := json.NewEncoder(w).Encode(t); err != nil {
	return err
}
	return nil
}

func (t *ArIterT_random) NewCopy(rows  *pgx.Rows) int {
 t.BaseCopy.NewCopy(rows,&t.T_random)
	for t.IterT_random.Next(){
		t.ArT_random = append(t.ArT_random,t.T_random)
	}
 return len(t.ArT_random)
}

func (t *IterT_random) NewCopy(rows  *pgx.Rows)  {

 t.BaseCopy.NewCopy(rows,&t.T_random)
return
}

func (t *IterT_random) Value() db.PgxGener  {

 return &t.T_random
}

func (t *IterT_random) StartCopy(tab string, con *pgx.Conn, tt pgx.CopyFromSource,rows  *pgx.Rows) (int, error) {

	return t.BaseCopy.StartCopy(tab, con, tt, rows, &t.T_random)

}




			





func ( dst T_randomParams)SQL(flag db.SQLOper)string{


  switch flag{
			
    case db.GenSelectID,  db.GenSelectAll:
    return fmt.Sprintf(db.SQLPattern[flag],
  T_randomSQL.All,
	     "t_random"	,
      T_randomSQL.PK ,
    )

		case db.GenSelectAll1:
		return fmt.Sprintf(db.SQLPattern[flag],
	T_randomSQL.All,
   "t_random"	,
  		)


			
  }

	return ""

}




func ( dst T_random)SQL(flag db.SQLOper)string{


  switch flag{
			


		case db.GenInsert:
		return  fmt.Sprintf( db.SQLPattern[flag],
			"t_random"	,
			 T_randomSQL.Inserts  ,
			 T_randomSQL.BindsInsert ,
				T_randomSQL.All,)

				case db.GenDelete:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"t_random"	,
					T_randomSQL.PK,
						T_randomSQL.All,)
				case db.GenUpdate:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"t_random"	,
					T_randomSQL.BindsUpdate  ,
								T_randomSQL.PKUpdate,
					T_randomSQL.All,)

			
  }

	return ""

}
