
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-26 22:18:17.296212529 +0200 CEST
//code for table guges1

package generteststruct



import (
	"restfest/db"
	"fmt"
	"time"
	"github.com/jackc/pgx"
			
)

type dummyGuges1 time.Time

type Guges1Params struct {
    Length int `schema:"length"`
    Offset int `schema:"offset"`
}


type Guges1 struct {
    Id int32  `json:"id"`
    Agger ArWeburl  `json:"agger"`
    Texter *string  `json:"texter"`
    Zahler *int32  `json:"zahler"`
    Zahler2 *int32  `json:"zahler2"`
    Texter2 *string  `json:"texter2"`
}

type ArGuges1 []Guges1



func (t Guges1) Columns() []string {
	return []string{	 "id" ,	 "agger" ,	 "texter" ,	 "zahler" ,	 "zahler2" ,	 "texter2" ,
			}
}


func (x *Guges1) Scanner() db.InterPgx {
	return db.InterPgx{
				&x.Id,
				&x.Agger,
				&x.Texter,
				&x.Zahler,
				&x.Zahler2,
				&x.Texter2,
			}

}

func (rt *Guges1)ROWInsert() db.InterPgx {
	  return db.InterPgx{
			&rt.Agger,	&rt.Texter,	&rt.Zahler,	&rt.Zahler2,	&rt.Texter2,
    
  }
}


func (rt *Guges1Params)ROWInsert() db.InterPgx {
  return db.InterPgx{
		&rt.Length,
		&rt.Offset,
}

}
				
				type MapGuges1 map[int32]Guges1
func (dst *MapGuges1) Scanner( rows *pgx.Rows) error {

	for rows.Next() {
		if err := rows.Err(); err != nil {
			return err
		}
		x := new( Guges1)
		if err := rows.Scan(x.Scanner()...); err != nil {
			return err
		}
		(*dst)[x.Id] = *x
	}

	return nil
}
	

func (dst *ArGuges1) Scanner( rows *pgx.Rows) error {
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return err
		}
		x := new( Guges1)
		if err := rows.Scan(x.Scanner()...); err != nil {
			return err
		}
		*dst = append(*dst, *x)
	}
	return nil
}


type IterGuges1 struct {
	db.BaseCopy
	Guges1 Guges1
}




func (t *IterGuges1) NewCopy(rows  *pgx.Rows)  {

 t.BaseCopy.NewCopy(rows,&t.Guges1)
return
}


func (t *IterGuges1) StartCopy(tab string, con *pgx.Conn, tt pgx.CopyFromSource,rows  *pgx.Rows) (int, error) {

	return t.BaseCopy.StartCopy(tab, con, tt, rows, &t.Guges1)

}




			


func SQLGuges1(flag db.SQLOper)string{
  x :=   "id,agger,texter,zahler,zahler2,texter2"

  switch flag{
			
    case db.GenSelectID,  db.GenSelectAll:
    return fmt.Sprintf(db.SQLPattern[flag],
    x,
	     "guges1"	,
      "id" ,
    )

		case db.GenSelectAll1:
		return fmt.Sprintf(db.SQLPattern[flag],
		x,
   "guges1"	,
  		)

		case db.GenInsert:
		return  fmt.Sprintf( db.SQLPattern[flag],
			"guges1"	,
			 "agger,texter,zahler,zahler2,texter2"  ,
			 "$1,$2,$3,$4,$5" ,
				x)

				case db.GenDelete:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"guges1"	,
						"id",
						x)
				case db.GenUpdate:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"guges1"	,
						"agger=$1,texter=$2,zahler=$3,zahler2=$4,texter2=$5"  ,
						"id=$6",
					x)

			
  }

	return ""

}
