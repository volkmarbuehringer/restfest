
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-05-01 12:59:02.46455087 +0200 CEST
//code for table testa1

package generteststruct



import (
	"restfest/db"
	"fmt"
	"time"
	"io"
	"strings"
		"encoding/json"
	"github.com/jackc/pgx"
			
)

type dummyTesta1 time.Time

type Testa1Params struct {
    Length int
    Offset int
}

type Testa1 struct {
    Id *int32  `json:"id"`
    Lulu *string  `json:"lulu"`
    Lulu1 *string  `json:"lulu1"`
    Ider *int32  `json:"ider"`
    Md5 *string  `json:"md5"`
    Gaga *string  `json:"gaga"`
    Fk1 *int32  `json:"fk1"`
    Ider1 *int32  `json:"ider1"`
    Lalu *string  `json:"lalu"`
    Zacka *string  `json:"zacka"`
    Fk2 *int32  `json:"fk2"`
    Name *string  `json:"name"`
    Vorname *string  `json:"vorname"`
}

type ArTesta1 []Testa1



var  Testa1SQL  =db.ColumnLists{
	 "id,lulu,lulu1,ider,md5,gaga,fk1,ider1,lalu,zacka,fk2,name,vorname",
	  "lulu,lulu1,ider,md5,gaga,fk1,ider1,lalu,zacka,fk2,name,vorname"  ,
		 "$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12" ,
	   "id" ,
		 "id=$13",
		"lulu,lulu1,ider,md5,gaga,fk1,ider1,lalu,zacka,fk2,name,vorname"	 ,
						"lulu=$1,lulu1=$2,ider=$3,md5=$4,gaga=$5,fk1=$6,ider1=$7,lalu=$8,zacka=$9,fk2=$10,name=$11,vorname=$12"  ,

}


func (x *Testa1Params) Scanner() db.InterPgx {
	return db.InterPgx{
				&x.Length,
				&x.Offset,
			}

}

func (x Testa1) Reader(mapper map[string][]string) [][]string {
	return [][]string{
				}

}


func (x Testa1Params) Reader(mapper map[string][]string) [][]string {
	return [][]string{
		mapper["length"],
		mapper["offset"],
			}

}



func (t Testa1) Columns() []string {
	return strings.Split(Testa1SQL.All,",")
}


func (x *Testa1) Scanner() db.InterPgx {
	return db.InterPgx{
				&x.Id,
				&x.Lulu,
				&x.Lulu1,
				&x.Ider,
				&x.Md5,
				&x.Gaga,
				&x.Fk1,
				&x.Ider1,
				&x.Lalu,
				&x.Zacka,
				&x.Fk2,
				&x.Name,
				&x.Vorname,
			}

}

func (rt *Testa1)ROWInsert() db.InterPgx {
	  return db.InterPgx{
			&rt.Lulu,	&rt.Lulu1,	&rt.Ider,	&rt.Md5,	&rt.Gaga,	&rt.Fk1,	&rt.Ider1,	&rt.Lalu,	&rt.Zacka,	&rt.Fk2,	&rt.Name,	&rt.Vorname,
    
  }
}


func (rt *Testa1Params)ROWInsert() db.InterPgx {
  return db.InterPgx{
		&rt.Length,
		&rt.Offset,
}

}



func (t Testa1) Writer(w io.Writer,trenner string)  error {
		w.Write([]byte(trenner))

if err := json.NewEncoder(w).Encode(t); err != nil {
	return err
}
	return nil
}




func ( dst Testa1Params)SQL(flag db.SQLOper)string{


  switch flag{
			
    case db.GenSelectID,  db.GenSelectAll:
    return fmt.Sprintf(db.SQLPattern[flag],
  Testa1SQL.All,
	     "testa1"	,
      Testa1SQL.PK ,
    )

		case db.GenSelectAll1:
		return fmt.Sprintf(db.SQLPattern[flag],
	Testa1SQL.All,
   "testa1"	,
  		)


			
  }

	return ""

}




func ( dst Testa1)SQL(flag db.SQLOper)string{


  switch flag{
			


		case db.GenInsert:
		return  fmt.Sprintf( db.SQLPattern[flag],
			"testa1"	,
			 Testa1SQL.Inserts  ,
			 Testa1SQL.BindsInsert ,
				Testa1SQL.All,)

				case db.GenDelete:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"testa1"	,
					Testa1SQL.PK,
						Testa1SQL.All,)
				case db.GenUpdate:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"testa1"	,
					Testa1SQL.BindsUpdate  ,
								Testa1SQL.PKUpdate,
					Testa1SQL.All,)

			
  }

	return ""

}



type IterTesta1 struct {
	db.BaseCopy
	Testa1 Testa1
}

type ArIterTesta1 struct {
	IterTesta1
	ArTesta1 ArTesta1
}


				

type MapTesta1 map[int32]Testa1

type MapIterTesta1 struct {
		IterTesta1
		MapTesta1  MapTesta1
}

				func (t *MapIterTesta1) NewCopy(rows  *pgx.Rows) int {
				 t.BaseCopy.NewCopy(rows,&t.Testa1)
				 t.MapTesta1=make(MapTesta1)
					for t.IterTesta1.Next(){
						t.MapTesta1[*t.Testa1.Id] = t.Testa1
					}
				 return len(t.MapTesta1)
				}


	



func (t *ArIterTesta1) NewCopy(rows  *pgx.Rows) int {
 t.BaseCopy.NewCopy(rows,&t.Testa1)
	for t.IterTesta1.Next(){
		t.ArTesta1 = append(t.ArTesta1,t.Testa1)
	}
 return len(t.ArTesta1)
}

func (t *IterTesta1) NewCopy(rows  *pgx.Rows)  {

 t.BaseCopy.NewCopy(rows,&t.Testa1)
return
}

func (t *IterTesta1) Value() db.PgxGener  {

 return &t.Testa1
}

func (t *IterTesta1) StartCopy(tab string, con *pgx.Conn, tt pgx.CopyFromSource,rows  *pgx.Rows) (int, error) {

	return t.BaseCopy.StartCopy(tab, con, tt, rows, &t.Testa1)

}




			
