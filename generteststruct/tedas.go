
// go generate
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-04-29 23:06:05.524493667 +0200 CEST
//code for table tedas

package generteststruct



import (
	"restfest/db"
	"fmt"
	"time"
	"github.com/jackc/pgx"
			
)

type dummyTedas time.Time

type TedasParams struct {
    Length int
    Offset int
}

func (x *TedasParams) Scanner() db.InterPgx {
	return db.InterPgx{
				&x.Length,
				&x.Offset,
			}

}

func (x Tedas) Reader(mapper map[string][]string) [][]string {
	return [][]string{
				}

}


func (x TedasParams) Reader(mapper map[string][]string) [][]string {
	return [][]string{
		mapper["length"],
		mapper["offset"],
			}

}

type Tedas struct {
    Id int32  `json:"id"`
    Agg []int32  `json:"agg"`
}

type ArTedas []Tedas



func (t Tedas) Columns() []string {
	return []string{	 "id" ,	 "agg" ,
			}
}


func (x *Tedas) Scanner() db.InterPgx {
	return db.InterPgx{
				&x.Id,
				&x.Agg,
			}

}

func (rt *Tedas)ROWInsert() db.InterPgx {
	  return db.InterPgx{
			&rt.Agg,
    
  }
}


func (rt *TedasParams)ROWInsert() db.InterPgx {
  return db.InterPgx{
		&rt.Length,
		&rt.Offset,
}

}
				
				type MapTedas map[int32]Tedas
				type MapIterTedas struct {
					IterTedas
					MapTedas  MapTedas
				}

				func (t *MapIterTedas) Next() bool {
					ok := t.IterTedas.Next()

				 return ok
				}

				func (t *MapIterTedas) NewCopy(rows  *pgx.Rows) int {
				 t.BaseCopy.NewCopy(rows,&t.Tedas)
				 t.MapTedas=make(MapTedas)
					for t.IterTedas.Next(){
						t.MapTedas[t.Tedas.Id] = t.Tedas
					}
				 return len(t.MapTedas)
				}


	

func (dst *ArTedas) Scanner( rows *pgx.Rows) error {
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return err
		}
		x := new( Tedas)
		if err := rows.Scan(x.Scanner()...); err != nil {
			return err
		}
		*dst = append(*dst, *x)
	}
	return nil
}


type IterTedas struct {
	db.BaseCopy
	Tedas Tedas
}

type ArIterTedas struct {
	IterTedas
	ArTedas ArTedas
}



func (t *ArIterTedas) Next() bool {
	ok := t.IterTedas.Next()

 return ok
}

func (t *ArIterTedas) NewCopy(rows  *pgx.Rows) int {
 t.BaseCopy.NewCopy(rows,&t.Tedas)
	for t.IterTedas.Next(){
		t.ArTedas = append(t.ArTedas,t.Tedas)
	}
 return len(t.ArTedas)
}

func (t *IterTedas) NewCopy(rows  *pgx.Rows)  {

 t.BaseCopy.NewCopy(rows,&t.Tedas)
return
}


func (t *IterTedas) StartCopy(tab string, con *pgx.Conn, tt pgx.CopyFromSource,rows  *pgx.Rows) (int, error) {

	return t.BaseCopy.StartCopy(tab, con, tt, rows, &t.Tedas)

}




			


func ( dst TedasParams)SQL(flag db.SQLOper)string{
  x :=   "id,agg"

  switch flag{
			
    case db.GenSelectID,  db.GenSelectAll:
    return fmt.Sprintf(db.SQLPattern[flag],
    x,
	     "tedas"	,
      "id" ,
    )

		case db.GenSelectAll1:
		return fmt.Sprintf(db.SQLPattern[flag],
		x,
   "tedas"	,
  		)


			
  }

	return ""

}




func ( dst Tedas)SQL(flag db.SQLOper)string{
  x :=   "id,agg"

  switch flag{
			


		case db.GenInsert:
		return  fmt.Sprintf( db.SQLPattern[flag],
			"tedas"	,
			 "agg"  ,
			 "$1" ,
				x)

				case db.GenDelete:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"tedas"	,
						"id",
						x)
				case db.GenUpdate:
				return  fmt.Sprintf(db.SQLPattern[flag]  ,
					"tedas"	,
						"agg=$1"  ,
						"id=$2",
					x)

			
  }

	return ""

}
